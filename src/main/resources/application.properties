# This application.properties can override the application.properties in the third party library.
# if this application.properties doesnt exist,then by default it picks up the one in the third party library
aws.profile.bravenewworld=dev-dna
aws.region=${REGION:eu-west-2}
# https://kafka.apache.org/documentation/#configuration
kafka.common.bootstrap.servers=127.0.0.1:9092

# https://kafka.apache.org/documentation/#producerconfigs
kafka.producer.acks=0
### BNW environment variables
env.app_name=${APP_NAME:dna-common-spring}
env.environment=${ENVIRONMENT:local}
env.region=${REGION:eu-west-1}
env.stage=${STAGE:dna}
env.branch=${BRANCH:master}

### choose active profile based on environment
spring.profiles.active=local

# logging
spring.application.name=${env.app_name}
spring.main.banner-mode=OFF
logging.level.=INFO
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN
logging.level.com.netflix=WARN

### Common properties

main.checkpoint.store.name=${env.bnw_name}
main.checkpoint.name=${env.environment}.${env.branch}.${main.extract.from}

# https://github.com/DataDog/java-dogstatsd-clifent
monitor.prefix=snowplow
monitor.tags=app_name:${env.app_name},environment:${env.environment},region:${env.region},stage:${env.stage},branch:${env.branch}

# https://kafka.apache.org/documentation/#producerconfigs
kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
kafka.producer.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
kafka.producer.compression.type=gzip

# https://kafka.apache.org/documentation/#adminclientconfigs
kafka.admin.bootstrap.servers=${kafka.common.bootstrap.servers}
